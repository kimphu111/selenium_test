from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
options.add_argument("--log-level=3")

driver = webdriver.Chrome(options=options)

try:
    print("\nB·∫ÆT ƒê·∫¶U TEST B·∫¢NG X·∫æP H·∫†NG\n")
    
    # 1. ƒêƒÉng nh·∫≠p
    driver.get("http://localhost:4200/auth")
    
    print("üîë ƒêang ƒëƒÉng nh·∫≠p...")
    
    email_input = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.NAME, "email"))
    )
    password_input = driver.find_element(By.NAME, "password")
    
    email_input.send_keys("kimphu123@gmail.com")
    password_input.send_keys("123")
    
    login_button = driver.find_element(By.XPATH, "//button[text()='Sign In']")
    login_button.click()
    
    WebDriverWait(driver, 10).until(
        EC.url_contains("/home")
    )
    print("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")

    # 2. Chuy·ªÉn sang trang ranking
    driver.get("http://localhost:4200/ranking")
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CLASS_NAME, "rankings-container"))
    )
    print(" ƒê√£ m·ªü trang x·∫øp h·∫°ng")
    
    # 3. Ki·ªÉm tra x·∫øp h·∫°ng ·ªü c√°c level
    levels = ["mix", "easy", "medium", "hard"]
    
    for level in levels:
        print(f"\n======== KI·ªÇM TRA M·ª®C ƒê·ªò: {level.upper()} ========")
        
        # Click v√†o n√∫t m·ª©c ƒë·ªô
        level_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, f"//button[contains(text(), '{level.capitalize()}')]"))
        )
        level_button.click()
        print(f" ƒê√£ ch·ªçn m·ª©c ƒë·ªô: {level}")
        
        # Ki·ªÉm tra hi·ªÉn th·ªã loading
        try:
            loading_text = WebDriverWait(driver, 2).until(
                EC.presence_of_element_located((By.XPATH, "//p[contains(text(), 'ƒêang t·∫£i x·∫øp h·∫°ng...')]"))
            )
            print(" Hi·ªÉn th·ªã loading khi chuy·ªÉn m·ª©c ƒë·ªô")
        except:
            print("Kh√¥ng th·∫•y hi·ªÉn th·ªã loading")
        
        # ƒê·ª£i d·ªØ li·ªáu t·∫£i xong
        try:
            WebDriverWait(driver, 10).until_not(
                EC.presence_of_element_located((By.CLASS_NAME, "loading"))
            )
            print("ƒê√£ t·∫£i d·ªØ li·ªáu x·∫øp h·∫°ng")
        except:
            print("Kh√¥ng th·∫•y tr·∫°ng th√°i loading bi·∫øn m·∫•t")
        
        # Ki·ªÉm tra c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng kh√¥ng
        ranking_items = driver.find_elements(By.CLASS_NAME, "ranking-item")
        print(f"üë• S·ªë ng∆∞·ªùi ch∆°i ·ªü level {level}: {len(ranking_items)}")

        if len(ranking_items) > 0:
            # Ki·ªÉm tra huy ch∆∞∆°ng
            print("\n--- Ki·ªÉm tra huy ch∆∞∆°ng ---")
            medal_types = [
                {"position": 0, "name": "V√†ng", "alt": "gold medal"},
                {"position": 1, "name": "B·∫°c", "alt": "silver medal"},
                {"position": 2, "name": "ƒê·ªìng", "alt": "bronze medal"},
                {"position": 3, "name": "Khuy·∫øn kh√≠ch", "alt": "encouragement medal"},
                {"position": 4, "name": "Tinh th·∫ßn", "alt": "spirit medal"}
            ]
            
            for medal in medal_types:
                position = medal["position"]
                if position < len(ranking_items):
                    try:
                        medal_img = ranking_items[position].find_element(By.XPATH, f".//img[@alt='{medal['alt']}']")
                        print(f" Huy ch∆∞∆°ng {medal['name']} hi·ªÉn th·ªã cho h·∫°ng {position+1}")
                    except:
                        print(f" Kh√¥ng t√¨m th·∫•y huy ch∆∞∆°ng {medal['name']} cho h·∫°ng {position+1}")
            
            # Hi·ªÉn th·ªã top 5 ng∆∞·ªùi ch∆°i (ho·∫∑c √≠t h∆°n n·∫øu kh√¥ng ƒë·ªß)
            print("\n--- Top ng∆∞·ªùi ch∆°i ---")
            top_count = min(5, len(ranking_items))
            
            for i in range(top_count):
                try:
                    player_name = ranking_items[i].find_element(By.CLASS_NAME, "player-name").text
                    score = ranking_items[i].find_element(By.CLASS_NAME, "score").text
                    duration = ranking_items[i].find_element(By.CLASS_NAME, "duration").text
                    print(f"#{i+1}: {player_name} - ƒêi·ªÉm: {score} - Th·ªùi gian: {duration}")
                except:
                    print(f"Kh√¥ng th·ªÉ l·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin ng∆∞·ªùi ch∆°i h·∫°ng {i+1}")
            
            # Ki·ªÉm tra s·∫Øp x·∫øp theo ƒëi·ªÉm
            if len(ranking_items) >= 2:
                print("\n--- Ki·ªÉm tra th·ª© t·ª± x·∫øp h·∫°ng ---")
                scores = []
                durations = []
                
                for item in ranking_items:
                    try:
                        score_text = item.find_element(By.CLASS_NAME, "score").text
                        duration_text = item.find_element(By.CLASS_NAME, "duration").text
                        scores.append(int(score_text))
                        durations.append(duration_text)
                    except:
                        continue
                
                is_sorted_by_score = all(scores[i] >= scores[i+1] for i in range(len(scores)-1))
                
                if is_sorted_by_score:
                    print(" X·∫øp h·∫°ng ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn")
                    
                    # Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p ƒëi·ªÉm b·∫±ng nhau
                    equal_score_positions = []
                    for i in range(len(scores)-1):
                        if scores[i] == scores[i+1]:
                            equal_score_positions.append((i, i+1))
                    
                    if equal_score_positions:
                        print(f"Ph√°t hi·ªán {len(equal_score_positions)} tr∆∞·ªùng h·ª£p ƒëi·ªÉm b·∫±ng nhau")
                        for pos in equal_score_positions:
                            i, j = pos
                            print(f"V·ªã tr√≠ {i+1} v√† {j+1} c√≥ c√πng ƒëi·ªÉm {scores[i]}")
                            print(f"Th·ªùi gian: {durations[i]} vs {durations[j]}")
                else:
                    print(" X·∫øp h·∫°ng KH√îNG ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn")
                    print("Chi ti·∫øt ƒëi·ªÉm s·ªë:")
                    for i, score in enumerate(scores):
                        print(f"H·∫°ng {i+1}: {score} ƒëi·ªÉm")
        else:
            print(" Kh√¥ng c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng ƒë·ªÉ ki·ªÉm tra")
        
        time.sleep(1)

    print("\nTEST B·∫¢NG X·∫æP H·∫†NG HO√ÄN T·∫§T! ")

except Exception as e:
    print(f" L·ªói: {e}")

finally:
    time.sleep(2)
    driver.quit()